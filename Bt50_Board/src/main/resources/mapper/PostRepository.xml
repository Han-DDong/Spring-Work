<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.lec.spring.repository.PostRepository">

<!-- <insert id="" <- 에는 insert id 의 매서드의 이름 "save" 들어가야함 -->
    <insert id="save" flushCache="true"
            parameterType="com.lec.spring.domain.Post"
            useGeneratedKeys="true" keyColumn="id" keyProperty="id">
        <!-- useGeneratedKeys 는 INSERT 쿼리를 실행할 자동으로 생성된 키를 가져올지 여부를 묻는 것 -->
        INSERT INTO t5_post
            (subject, content, user_id)
        VALUES
            (#{subject}, #{content}, #{user.id})
    </insert>

    <update id="incViewCnt" flushCache="true">
        UPDATE t5_post
        SET viewcnt = viewcnt + 1
        WHERE id = #{id}
    </update>

    <!-- 반복해서 사용될 쿼리문은 sql 태그로 정의 하고, include 태그로 가져다 쓸수 있다 -->
    <sql id="SELECT_BASE">
        SELECT
            p.id "p_id",
            p.subject "p_subject",
            p.content "p_content",
            p.viewcnt "p_viewcnt",
            p.regdate "p_regdate",
            u.id "u_id",
            u.username "u_username",
            u.name "u_name",
            u.email "u_email",
            u.regdate "u_regdate"
        FROM
            t5_post p, t5_user u
        WHERE
            p.user_id = u.id
    </sql>

    <!-- JOIN 문에서 여러 테이블의 데이터를 매핑 받기! -->
    <resultMap id="mapUser" type="com.lec.spring.domain.User">
        <result column="u_id" property="id"/>
        <result column="u_username" property="username"/>
        <result column="u_password" property="password"/>
        <result column="u_name" property="name"/>
        <result column="u_email" property="email"/>
        <result column="u_regDate" property="regDate"/>
    </resultMap>

    <resultMap id="mapPost" type="com.lec.spring.domain.Post">
        <result column="p_id" property="id"/>
        <result column="p_subject" property="subject"/>
        <result column="p_content" property="content"/>
        <result column="p_viewcnt" property="viewCnt"/>
        <result column="p_regdate" property="regDate"/>
        <collection property="user" resultMap="mapUser"/>
    </resultMap>

    <select id="findAll" resultMap="mapPost">
       <include refid="SELECT_BASE"/>
        ORDER BY p.id DESC
    </select>

    <select id="findById" resultMap="mapPost">
        <include refid="SELECT_BASE"/>
        AND p.id = #{id}
        <!--
          SELECT 는 조회의 용도로 사용되기 때문에 flushCache="true" 를 써 줄 필요가 없음
          flushCache 의 기본값은 false임.
          -->
#         SELECT
#         id,
#         subject,
#         content,
#         viewcnt "viewCnt",
#         user,
#         regdate "regDate"
#         FROM
#         t4_post
#         WHERE
#             1 = 1 <!-- 조건절 여러개 만들기 편함 -->
    </select>

    <update id="update" flushCache="true"
            parameterType="com.lec.spring.domain.Post">
        UPDATE t5_post
        SET subject = #{subject}, content = #{content}
        WHERE id = #{id}
    </update>

    <delete id="delete" flushCache="true"
        parameterType="com.lec.spring.domain.Post">
        DELETE FROM t5_post WHERE id = #{id}
    </delete>

    <!-- 페이징 용 쿼리 -->
    <select id="selectFromRow" resultMap="mapPost">
        <include refid="SELECT_BASE"/>
        ORDER BY p.id DESC
        LIMIT #{param1}, #{param2}
    </select>

    <select id="countAll" resultType="int">
        SELECT count(*) FROM t5_post;
    </select>

</mapper>





























